{"meta":{"title":"业北Online","subtitle":"","description":"","author":"qdteng","url":"https://qdteng.online","root":"/"},"pages":[{"title":"文章分类","date":"2024-09-23T01:52:50.000Z","updated":"2024-09-23T02:13:57.162Z","comments":true,"path":"categories/index.html","permalink":"https://qdteng.online/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2024-09-23T01:58:24.000Z","updated":"2024-09-23T02:14:24.069Z","comments":true,"path":"tags/index.html","permalink":"https://qdteng.online/tags/index.html","excerpt":"","text":""},{"title":"links","date":"2024-09-23T00:20:37.000Z","updated":"2024-09-23T00:28:47.470Z","comments":true,"path":"links/index.html","permalink":"https://qdteng.online/links/index.html","excerpt":"","text":"JSDELIVR 免费cdn 稿定 在线ps 山东大学镜像站 github 镜像站 阿里云镜像 镜像站"}],"posts":[{"title":"屏蔽非国内ip访问","slug":"屏蔽非国内ip访问","date":"2025-01-03T00:54:14.000Z","updated":"2025-01-03T06:49:18.217Z","comments":true,"path":"2025/01/03/屏蔽非国内ip访问/","permalink":"https://qdteng.online/2025/01/03/%E5%B1%8F%E8%94%BD%E9%9D%9E%E5%9B%BD%E5%86%85ip%E8%AE%BF%E9%97%AE/","excerpt":"","text":"按IP屏蔽国家有的业务是只需要国内用户访问的，防止国外ip各种闲人攻击可以这么做 123git clone https://gitee.com/qdteng/block-ips.gitsh block-ips/block-ips.sh 执行脚本后可选择具体国家代码进行屏蔽 国家代码查看","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"公网ip屏蔽","slug":"公网ip屏蔽","permalink":"https://qdteng.online/tags/%E5%85%AC%E7%BD%91ip%E5%B1%8F%E8%94%BD/"},{"name":"linux安全","slug":"linux安全","permalink":"https://qdteng.online/tags/linux%E5%AE%89%E5%85%A8/"},{"name":"linux防火墙","slug":"linux防火墙","permalink":"https://qdteng.online/tags/linux%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"国家屏蔽","slug":"国家屏蔽","permalink":"https://qdteng.online/tags/%E5%9B%BD%E5%AE%B6%E5%B1%8F%E8%94%BD/"}]},{"title":"快速剪辑那些事","slug":"快速剪辑那些事","date":"2024-12-09T00:27:32.000Z","updated":"2024-12-10T00:00:06.905Z","comments":true,"path":"2024/12/09/快速剪辑那些事/","permalink":"https://qdteng.online/2024/12/09/%E5%BF%AB%E9%80%9F%E5%89%AA%E8%BE%91%E9%82%A3%E4%BA%9B%E4%BA%8B/","excerpt":"","text":"LosslessCut OpenShot Handbrake如图就是那么简单直接","categories":[{"name":"乱弹","slug":"乱弹","permalink":"https://qdteng.online/categories/%E4%B9%B1%E5%BC%B9/"}],"tags":[{"name":"视频剪辑","slug":"视频剪辑","permalink":"https://qdteng.online/tags/%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/"},{"name":"LosslessCut","slug":"LosslessCut","permalink":"https://qdteng.online/tags/LosslessCut/"},{"name":"OpenShot","slug":"OpenShot","permalink":"https://qdteng.online/tags/OpenShot/"},{"name":"HandBrake","slug":"HandBrake","permalink":"https://qdteng.online/tags/HandBrake/"}]},{"title":"OCR识别","slug":"OCR识别","date":"2024-11-27T06:46:23.000Z","updated":"2024-11-27T07:58:21.287Z","comments":true,"path":"2024/11/27/OCR识别/","permalink":"https://qdteng.online/2024/11/27/OCR%E8%AF%86%E5%88%AB/","excerpt":"","text":"先列举几个牛逼的存在 Tesseract OCR Google Vision API Amazon Textract Microsoft Azure OCR ABBYY FineReader JavaOCR 说一个可以离线的渣渣Tesseract OCR 123456&lt;!-- Maven依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;net.sourceforge.tess4j&lt;/groupId&gt; &lt;artifactId&gt;tess4j&lt;/artifactId&gt; &lt;version&gt;4.5.1&lt;/version&gt; &lt;/dependency&gt; 翻译出来的内容有点人眼难懂 再说一个看起来还不错的离线方案UmiOCR 免费：本项目所有代码开源，完全免费。 方便：解压即用，离线运行，无需网络。 高效：自带高效率的离线OCR引擎，内置多种语言识别库。 灵活：支持命令行、HTTP接口等外部调用方式。 功能：截图OCR &#x2F; 批量OCR &#x2F; PDF识别 &#x2F; 二维码 思路开启服务 使用java以http的方式调用识别ocr返回结果 Umi-OCR: Umi-OCR 是一款免费、开源、可批量的离线 OCR 软件，基于 PaddleOCR，适用于 Windows10&#x2F;11 平台","categories":[{"name":"后端","slug":"后端","permalink":"https://qdteng.online/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"java-ocr","slug":"java-ocr","permalink":"https://qdteng.online/tags/java-ocr/"}]},{"title":"谈谈windows系统C盘减肥","slug":"谈谈windows系统C盘减肥","date":"2024-11-22T00:41:35.000Z","updated":"2024-11-22T01:08:39.272Z","comments":true,"path":"2024/11/22/谈谈windows系统C盘减肥/","permalink":"https://qdteng.online/2024/11/22/%E8%B0%88%E8%B0%88windows%E7%B3%BB%E7%BB%9FC%E7%9B%98%E5%87%8F%E8%82%A5/","excerpt":"","text":"关于休眠这个可以借助360等软件关闭系统休眠，估计可以解决10多G的空间，但是对于喜欢使用休眠的同学可能不适用 关于AppData文件夹大部分软件都会将一部分运行、缓存数据存放这个文件夹里，随着系统使用的时间C盘会越来越小并不受控制 WizTree分析文件占用空间 修改注册表 1、首先要在“开始”——“运行”内输入“regedit”打开 注册表 编辑器； 2、在“文件”下拉菜单中的“导出”功能备份好注册表，以防万一； 3、在左侧窗口依次打开： HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders 4、在右侧窗口里，你看到的“名称”就代表那些特殊的文件夹，“数据”就是它们所对应的默认存储路径。修改默认的路径就可以让你的文件夹移动了； 5、AppData 应用程序数据目录 C：\\Documents and Settings\\User name\\Application Data； 6、修改里面 AppData对应的路径到你自定义的地方，（比如D：\\AppData）； 移动AppData文件夹到非C盘路径win10下直接移动appdata文件因为一些应用程序的引用会报错无法移动，按住shift键点击重启电脑进入命令行模式使用命令行移动 123456#源文件夹目录为d:\\src，目标文件夹目录为d:\\dst，则具体命令为copy d:\\src d:\\dst# 删除文件夹rd /s /q C:\\Users\\Administrator\\AppData# 建立文件夹软连接mklink /D C:\\Users\\Administrator\\AppData D:\\qdteng\\AppData 修改完后重启电脑不出意外您的c盘就正常了","categories":[{"name":"乱弹","slug":"乱弹","permalink":"https://qdteng.online/categories/%E4%B9%B1%E5%BC%B9/"}],"tags":[{"name":"乱弹","slug":"乱弹","permalink":"https://qdteng.online/tags/%E4%B9%B1%E5%BC%B9/"},{"name":"windows","slug":"windows","permalink":"https://qdteng.online/tags/windows/"},{"name":"windowsC盘满了","slug":"windowsC盘满了","permalink":"https://qdteng.online/tags/windowsC%E7%9B%98%E6%BB%A1%E4%BA%86/"},{"name":"windows AppData","slug":"windows-AppData","permalink":"https://qdteng.online/tags/windows-AppData/"}]},{"title":"IP形象和KV了解一下","slug":"IP形象和KV了解一下","date":"2024-11-21T01:38:06.000Z","updated":"2024-11-21T02:09:17.496Z","comments":true,"path":"2024/11/21/IP形象和KV了解一下/","permalink":"https://qdteng.online/2024/11/21/IP%E5%BD%A2%E8%B1%A1%E5%92%8CKV%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B/","excerpt":"","text":"KVKV是什么意思KV是英文Key Vision英文首字母的缩写，中文翻译为主视觉，指的是在一个广告设计活动中，最主要的占据最核心地位的视觉设计稿。从这一核心视觉设计稿中可以延伸出来多种分支画面，共同组成整体的广告活动。 KV(主视觉)的内容1、标志设计 人们可以获取大量信息，并很大程度地影响自己的生活观念和生活方式。分为政治性、公益性、文化性、商业性。 2、VI设计 指运用视觉设计手段，通过logo的造型和特定的色彩等表现手法，使企业的经营理念、行为观念、管理特色、产品包装风格、营销准则与策略形成一种整体形象视觉设计。 3、广告设计 各种手工或电脑的绘画手段或影像技术，以及利用复合方式进行创造性的图像设计，构思巧妙，表现独特。 4、画册设计 画册也被称为宣传册，宣传手册，图册，折页设计。画册设计宣传目的强，以生命的形式和风格来展现企业的风貌与形象的形成，都企业所注重的观点，当企业所关注的焦点不同，所以宣传的产品性质差异化不同，既而让这样的宣传目的达到一个高点。 5、海报设计 海报设计是视觉传达的一种表现形式，主要运用图像、文字、色彩、版面、图形等元素，进行创意性的平面设计。海报设计通常能够快速吸引他人的注意力，恰当地展现出商家的宣传信息，从而起到促销推广等重要作用。 6、包装设计 对产品包装设计及排版等进行艺术化的设计，提高消费者对产品的关注，从而加深对其思想性、文化性和知识性的认识。 7、界面设计 界面设计又叫UI设计，包括网页视觉设计和各类手执（手机、pad等等）系统的界面视觉设计（不含交互、体验），是近些年兴起的新兴设计学科。 KV(主视觉)的特点1、关联性 在设计画面中的品牌信息要直接和消费者的特征相关联，只有二者相互关联才能够按照消费者对广告中的画面有所兴趣和有所关注。 2、原创性 如果所采用的设计画面或设计方式只是千篇一律的或者是较为普通的表达方式，那么客户很容易将这些普通的信息直接过滤掉。所以更应当采用一些创新的或者是原创度较高的信息。 3、震撼性 设计出来的作品最好能够让消费者们眼前一亮，这样就能够达到掷地有声的效果，也能够让他们加强对该品牌的印象。 IP形象形象 IP 主要依赖于形象展开的故事类型，比如我们前面提到的 IP 吉祥物就属于这种类型，它更多是基于某个角色形象来进行商业的变现，此形象在人们心中有着很深的印象。 比如：Hello Kitty、米老鼠、唐老鸭就属于形象 IP，它们在商业模式上拥有极大的用户群，衍生产品很多，IP 本身的内容创作较少，更依赖于授权的商业模式。","categories":[{"name":"乱弹","slug":"乱弹","permalink":"https://qdteng.online/categories/%E4%B9%B1%E5%BC%B9/"}],"tags":[{"name":"乱弹","slug":"乱弹","permalink":"https://qdteng.online/tags/%E4%B9%B1%E5%BC%B9/"}]},{"title":"centeros8的时间同步chrony","slug":"centeros8的时间同步chrony","date":"2024-11-18T06:49:31.000Z","updated":"2024-11-18T07:22:50.674Z","comments":true,"path":"2024/11/18/centeros8的时间同步chrony/","permalink":"https://qdteng.online/2024/11/18/centeros8%E7%9A%84%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5chrony/","excerpt":"","text":"为什么要做时间同步？分布式服务在调用本地时间做数据处理时时间问题显得尤为重要 centeros8 中使用chronyCentOS8上使用Chrony配置NTP服务器，用于同步时间。 它有两个程序，chrony和chronyd， chronyd是守护进程 ，chrony是一个命令行界面程序，可以用来监控chronyd的性能，并修改各种操作参数。 系统会默认安装并启动，如果系统不存在则需要安装此工具库。 1dnf -y install chrony 关于配置项的描述12345678910111213141516171819202122232425262728293031323334353637# 使用pool.ntp.org项目中的公共服务器。# 请考虑加入该池（http://www.pool.ntp.org/join.html）。pool ntp.aliyun.com iburst# 记录系统时钟获取/失去时间的速率。driftfile /var/lib/chrony/drift# 如果系统时钟的偏差大于1秒，则允许在前三次更新中进行 步进调整。makestep 1.0 3# 启用内核对实时时钟（RTC）的同步。rtcsync# 启用所有支持硬件时间戳的接口。#hwtimestamp *# 增加调整系统时钟所需最小可选源的数量。#minsources 2# 允许来自本地网络的NTP客户端访问。#allow 0.0.0.0/0# 即使未与时间源同步，也提供时间服务。#local stratum 10# 指定包含 NTP 认证密钥的文件。# keyfile /etc/chrony.keys# 从系统 tz 数据库获取 TAI-UTC 偏移量和闰秒。leapsectz right/UTC# 指定日志文件的目录。logdir /var/log/chrony# 选择要记录哪些信息。#log measurements statistics tracking 服务端配置12345678910111213141516171819202122232425262728server 0.cn.pool.ntp.orgserver 1.cn.pool.ntp.orgserver 2.cn.pool.ntp.orgserver 3.cn.pool.ntp.orgserver ntp.aliyun.com iburst# 如果时间差超过0.1秒，就在前三次的时钟更新时，启动大步跨方式## chronyd根据需求减慢或加速时间调整，## 在某些情况下系统时钟可能漂移过快，导致时间调整用时过长。## 该指令强制chronyd调整时期，大于某个阀值时步进调整系统时钟。## 只有在因chronyd启动时间超过指定的限制时（可使用负值来禁用限制）没有更多时钟更新时才生效。makestep 0.1 3# 允许哪些网段的客户端访问allow 0.0.0.0/0# 允许访问哪些时间服务器## all表示允许本机访问所有时间服务器allow all# 服务器绑定ip和端口bindaddress 0.0.0.0local stratum 10 客户端配置1234allow allserver 192.168.30.11 iburstmakestep 0.1 3 一些常用命令123456789101112131415161718192021 查看时间同步源： $ chronyc sources -v 立即手工同步 $chronyc -a makestep 查看时间同步源状态： $ chronyc sourcestats -v 设置硬件时间 硬件时间默认为UTC： $ timedatectl set-local-rtc 1 查看时间配置信息 timedatectl 启用NTP时间同步： $ timedatectl set-ntp yes 校准时间服务器： $ chronyc tracking #实时打印当前时间 最后需要注意的是，配置完/etc/chrony.conf后，需重启chrony服务，否则可能会不生效。 使用systemctl start chronyd.service 启动chrony服务 使用systemctl enable chronyd.service 设置开机同步时间 使用systemctl status chronyd.service 查看服务状态 一个未验证过的脚本12345678910111213141516171819202122232425262728293031323334353637#!/bin/bash# 配置chrony 作为时间同步的 服务端 和 客户端。# 服务端IP(内网)地址。server_ip=&quot;192.168.30.11&quot;# 服务端允许哪个IP段访问。server_allow_ip=&quot;192.168.30.0/24&quot;# 服务端使用的时间源。server_source=&quot;pool ntp.aliyun.com iburst&quot;# 服务端配置ntp_server_conf() &#123; sed -i &#x27;s/^pool/#pool/&#x27; /etc/chrony.conf sed -i &#x27;s/^server/#server/&#x27; /etc/chrony.conf echo -e &quot;$&#123;1&#125;\\nallow $&#123;2&#125;\\nlocal stratum 10&quot; &gt;&gt; /etc/chrony.conf systemctl restart chronyd firewall-cmd --permanent --zone=public --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.30.0/24&quot; port port=&quot;123&quot; protocol=&quot;udp&quot; accept&quot; firewall-cmd --reload&#125;# 客户端配置ntp_client_conf() &#123; sed -i &#x27;s/^pool/#pool/&#x27; /etc/chrony.conf sed -i &#x27;s/^server/#server/&#x27; /etc/chrony.conf echo &quot;server $1 iburst&quot; &gt;&gt; /etc/chrony.conf systemctl restart chronyd&#125;# 判断运行该脚本的是服务端还是客户端。ip addr | grep &quot;$server_ip&quot; &amp;&gt; /dev/nullif [ &quot;$?&quot; -eq 0 ];then ntp_server_conf &quot;$&#123;server_source&#125;&quot; &quot;$&#123;server_allow_ip&#125;&quot;else ntp_client_conf &quot;$&#123;server_ip&#125;&quot;fi","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"本地时间同步","slug":"本地时间同步","permalink":"https://qdteng.online/tags/%E6%9C%AC%E5%9C%B0%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"},{"name":"chrony","slug":"chrony","permalink":"https://qdteng.online/tags/chrony/"},{"name":"linux集群时间同步","slug":"linux集群时间同步","permalink":"https://qdteng.online/tags/linux%E9%9B%86%E7%BE%A4%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"}]},{"title":"LLM本地化了解一下","slug":"LLM本地化了解一下","date":"2024-10-25T14:24:10.000Z","updated":"2025-02-20T05:59:05.511Z","comments":true,"path":"2024/10/25/LLM本地化了解一下/","permalink":"https://qdteng.online/2024/10/25/LLM%E6%9C%AC%E5%9C%B0%E5%8C%96%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B/","excerpt":"","text":"引言参考资料 Hugging face 排行 ollama 排行 处理文件的本地智库 docker镜像科学下载 文生视频 AnythingLLM 的 Docker 使用_anythingllm docker-CSDN博客 Linux内网离线安装Ollama_ollama离线安装-CSDN博客 砂锅操作本次实验使用linux版本 Debian GNU&#x2F;Linux 12 (bookworm) Ollama离线安装在线安装脚本引用了github在线下载文件，所以速度你懂得 ollama 安装脚本下载地址 ollama 安装包 具备以上2个文件之后 修改安装脚本使其可正常安装，不同版本略有不同，具体思路 去掉shell中远程下载部分 修改shell中对安装包的引用路径确保能找到对应文件 关键字 1234#下载链接status &quot;Downloading ollama...&quot;#ollama安装目录status &quot;Installing ollama to $BINDIR...&quot; Ollama使用可在官网搜索支持的大模型Ollama-search-tools 运行llama3123# 1b =10亿参数ollama run llama3.1#下载成功后不出意外你就可以跟他say hello 了 修改ollama可以非localhost访问12345678#编辑配置文件vi /etc/systemd/system/ollama.service.d/override.conf#添加如下内容[Service]Environment=&quot;OLLAMA_HOST=0.0.0.0#重启服务使生效systemctl daemon-reloadsystemctl restart ollama anythingLLM安装准备好docker环境1234567891011#防止便秘，先配置几个好用的docker源vi /etc/docker/daemon.json&quot;registry-mirrors&quot;: [ &quot;https://dockerhub.icu&quot;, &quot;https://docker.chenby.cn&quot;, &quot;https://docker.1panel.live&quot;, &quot;https://docker.awsl9527.cn&quot;, &quot;https://docker.anyhub.us.kg&quot;, &quot;https://dhub.kubesre.xyz&quot; ] 使用docker运行12345678910111213141516171819202122# 准备好配置目录export STORAGE_LOCATION=/var/lib/anythingllm &amp;&amp; \\mkdir -p $STORAGE_LOCATION &amp;&amp; \\touch &quot;$STORAGE_LOCATION/.env&quot;#设置目录可完全读写chmod -R 777 /var/lib/anythingllm# 去吧皮卡丘docker run -d \\ --name anythingllm \\ --add-host=host.docker.internal:host-gateway \\ --env STORAGE_DIR=/app/server/storage \\ --health-cmd &quot;/bin/bash /usr/local/bin/docker-healthcheck.sh || exit 1&quot; \\ --health-interval 60s \\ --health-start-period 60s \\ --health-timeout 10s \\ -p 3001:3001/tcp \\ --restart=always \\ --user anythingllm \\ -v $&#123;STORAGE_LOCATION&#125;:/app/server/storage \\ -v $&#123;STORAGE_LOCATION&#125;/.env:/app/server/.env \\ -w /app \\ mintplexlabs/anythingllm anythingLLM 配置 ollama 访问地址 ： http://localhost:3001/ 配置 ollama 地址 注意这里的 ollama base url 需要填写docker配置的宿主机映射url hello word 4.[24.12.28]这里补充一下嵌入式模型 用于处理文档的嵌入式模型安装 1ollama pull nomic-embed-text OpenWebUI安装123456789docker pull ghcr.io/open-webui/open-webui:main #创建数据存储路径mkdir -p /opt/openwebui/data#给定访问权限chmod 777 -R /opt/openwebui#docker运行docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway \\-v open-webui:/app/backend/data --name open-webui \\--restart always ghcr.io/open-webui/open-webui:main","categories":[{"name":"乱弹","slug":"乱弹","permalink":"https://qdteng.online/categories/%E4%B9%B1%E5%BC%B9/"}],"tags":[{"name":"AI","slug":"AI","permalink":"https://qdteng.online/tags/AI/"},{"name":"大模型","slug":"大模型","permalink":"https://qdteng.online/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"},{"name":"本地智库","slug":"本地智库","permalink":"https://qdteng.online/tags/%E6%9C%AC%E5%9C%B0%E6%99%BA%E5%BA%93/"},{"name":"Ollama","slug":"Ollama","permalink":"https://qdteng.online/tags/Ollama/"}]},{"title":"重新认识一下linux","slug":"重新认识一下linux","date":"2024-10-23T00:01:44.000Z","updated":"2024-10-23T00:49:53.481Z","comments":true,"path":"2024/10/23/重新认识一下linux/","permalink":"https://qdteng.online/2024/10/23/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86%E4%B8%80%E4%B8%8Blinux/","excerpt":"","text":"引言 最早接触linux应该是在08年左右，最初的给定印象来自于专注运维工作的一个朋友考取Redhat证书。那会便认为Redhat是linux最好的吧，所以后来大概近10年左右本人都是鉴定的CenterOS支持者 参考资料 一图看懂Linux发行版本分支 Linux系统发行版大全 Linux操作系统分类简介 个人见解 注： “信创”这个词最早来源于“信创工委会”。该组织的全称是：信息技术应用创新工作委员会，是在2016年，由24家专业从事软硬件关键技术研究及应用的国内单位，共同发起成立的一个非营利性社会组织。 从linux使用方向考虑，既然选择linux无非是考虑信创、开发应用、服务器应用，接下来从这3个方向谈谈信创 国内信创常见如：深度linux、麒麟linux这两大阵营在使用习惯上来说偏向于Debian、Ubuntu；并且包管理方式都是apt-get&#x2F;dpkg; 开发应用 大部分使用linux开发的同学都是属于开发跨平台的应用，在linux操作上，用到的平时看文档、写代码的编辑器等等当然是越易于操作越稳定越受欢迎；在桌面应用方面我认为ubuntu、centos、debian、opensuse等发行版都是比较不错的选择，但是让我选择首选的是ubuntu，因为其使用习惯易用性上确实优化的到位； 服务器应用 我想使用linux最多的应该是从这方面考虑的朋友了；我猜在服务器应用方面大家都是喜欢使用命令行界面的，在编写shell、配置应用参数方面，命令行足以，重点是运维效率高。那在服务器搭建初期，最头疼的应该是那种离线部署的环境，尤其是不能访问互联网，这给运维的相关同事带来了不少曲折。从这点我们又回到了安装包管理器的考虑；谁不喜欢windows.exe一键安装式的快感呢？毕竟在安装软件时这依赖那依赖总让人有一种便秘的感觉！ 总结 从以上3个方面看，既然前两者都偏向了debian阵营，那最后的服务器选择是不是考虑debian更省心省力呢？有人可能会说redhat更稳定，但是从我近3年的实践看debian也是非常稳定，有一些linux平台的应用反而对apt-get&#x2F;dpkg的安装包支持更广泛，从个人使用来说更是越来越亲近，不像centeros坚如磐石，充满了机器的味道 完结","categories":[{"name":"-运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"-linux","slug":"linux","permalink":"https://qdteng.online/tags/linux/"}]},{"title":"linux离线安装包的下载","slug":"linux离线安装包的下载","date":"2024-10-22T23:52:47.000Z","updated":"2024-10-23T01:07:18.454Z","comments":true,"path":"2024/10/23/linux离线安装包的下载/","permalink":"https://qdteng.online/2024/10/23/linux%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85%E7%9A%84%E4%B8%8B%E8%BD%BD/","excerpt":"","text":"参考重新认识一下linux debianapt-get&#x2F;dpkgaptitude1234#安装aptitudeapt install aptitude#使用 sudo aptitude --download-only install &lt;package-name&gt; 例如：sudo aptitude --download-only install ros-melodic-rosbridge-server apt-get12#xxx是待下载的安装包apt-get -d install xxx 离线安装.deb文件1sudo dpkg -i *.deb redhatrpm&#x2F;yumrepotrack12345# 安装yum-utilsyum -y install yum-utils# 下载 ansible 全量依赖包repotrack ansible downloadonly插件1234#在线安装downloadonlyyum install yum-plugin-downloadonly#格式：yum install –downloadonly –downloaddir= your-dir package-name，如：yum install --downloadonly --downloaddir=/data/rpm nmap 安装离线rpm 包1234rpm -ivh foo-1.0-l.i386.rpm#加上 --force --nodeps －－－－－－强行安装－－－rpm -ivh telnet-server-0.17-38.el5.i386.rpm --force --nodepsrpm -ivh *.rpm --force --nodeps","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://qdteng.online/tags/linux/"},{"name":"apt-get/dpkg","slug":"apt-get-dpkg","permalink":"https://qdteng.online/tags/apt-get-dpkg/"},{"name":"rpm/yum","slug":"rpm-yum","permalink":"https://qdteng.online/tags/rpm-yum/"}]},{"title":"聊聊企微接入微信实现消息通知的推送","slug":"聊聊企微接入微信实现消息通知的推送","date":"2024-10-22T00:55:53.000Z","updated":"2024-10-22T03:09:40.782Z","comments":true,"path":"2024/10/22/聊聊企微接入微信实现消息通知的推送/","permalink":"https://qdteng.online/2024/10/22/%E8%81%8A%E8%81%8A%E4%BC%81%E5%BE%AE%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E9%80%9A%E7%9F%A5%E7%9A%84%E6%8E%A8%E9%80%81/","excerpt":"","text":"引言 某些业务场景最好能接入微信实现告警消息的实时推送 某些业务场景最好能够在小程序、公众号等界面上实现实时客服接入聊天 参考资料 通过企业微信实现消息推送到个人微信 发送应用消息id转译说明 小程序配置企业微信客服，获取企业ID和客服链接的教程 企业微信后台管理 企业微信服务端开发文档 企业微信认证官方说明 WxJava 开源大语言模型集合 推荐5款AI开源项目 GitHub上有哪些值得关注的AI开源项目 使用场景预定中... 待更","categories":[{"name":"乱弹","slug":"乱弹","permalink":"https://qdteng.online/categories/%E4%B9%B1%E5%BC%B9/"}],"tags":[{"name":"AI","slug":"AI","permalink":"https://qdteng.online/tags/AI/"},{"name":"大模型","slug":"大模型","permalink":"https://qdteng.online/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"},{"name":"java","slug":"java","permalink":"https://qdteng.online/tags/java/"},{"name":"微信消息推送","slug":"微信消息推送","permalink":"https://qdteng.online/tags/%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"},{"name":"企业微信","slug":"企业微信","permalink":"https://qdteng.online/tags/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1/"},{"name":"微信告警","slug":"微信告警","permalink":"https://qdteng.online/tags/%E5%BE%AE%E4%BF%A1%E5%91%8A%E8%AD%A6/"},{"name":"微信机器人","slug":"微信机器人","permalink":"https://qdteng.online/tags/%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"}]},{"title":"springboot应用如何优雅的关闭","slug":"springboot应用如何优雅的关闭","date":"2024-10-22T00:11:53.000Z","updated":"2024-10-22T02:47:14.805Z","comments":true,"path":"2024/10/22/springboot应用如何优雅的关闭/","permalink":"https://qdteng.online/2024/10/22/springboot%E5%BA%94%E7%94%A8%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%85%B3%E9%97%AD/","excerpt":"","text":"引言某个项目中采用多中间件、多线程、定时任务等的技术实现，项目启动后，需要优雅的关闭项目，避免项目直接关闭导致某些未运行完成的子进程强制关闭项目数据丢失或部分事务未完成提交。 参考资料 SpringBoot 优雅停机的正确姿势 面试官：SpringBoot如何优雅停机 Spring Boot 项目优雅关闭 kill 杀死进程 kill -2 pid向指定 pid 发送 SIGINT 中断信号，等同于 ctrl+c。也就说，不仅当前进程会收到该信号，而且它的子进程也会收到终止的命令。 kill -9 pid向指定 pid 发送 SIGKILL 立即终止信号。程序不能捕获该信号，最粗暴最快速结束程序的方法。 kill -15 pid向指定 pid 发送 SIGTERM 终止信号。信号会被当前进程接收到，但它的子进程不会收到，如果当前进程被 kill 掉，它的的子进程的父进程将变成 init 进程 (init 进程是那个 pid 为 1 的进程)。 kill pid等同于 kill 15 pid。 在以上命令中，我们不能使用“kill -9”来杀死进程，使用“kill”杀死进程即可。 方案一 (采用)采用springboot actuator 优雅停机方案 pom.xml 添加 spring-boot-starter-actuator 引用1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt; yml 配置1234567891011121314151617181920212223spring: lifecycle: # 优雅下线超时时间 timeout-per-shutdown-phase: 1m# 暴露 shutdown 接口 这个端口和服务地址是独立的，非springboot 的启动端口# 调用 curl -X POST http://127.0.0.1:18080/actuator/shutdownmanagement: server: ### 端口 port: 18001 ### 允许服务地址 address: 127.0.0.1 endpoint: ### 是否开启下线 默认关闭 shutdown: enabled: true endpoints: web: exposure: ### 暴露接口 include: shutdown 方案二 yml配置graceful1234# 开启优雅停机，默认值：immediate 为立即关闭server.shutdown=graceful# 设置缓冲期，最大等待时间，默认：30秒spring.lifecycle.timeout-per-shutdown-phase=60s Tomcat 容器关闭实现12345678910111213141516171819202122232425public class TomcatGracefulShutdown implements TomcatConnectorCustomizer, ApplicationListener&lt;ContextClosedEvent&gt; &#123; private volatile Connector connector; public void customize(Connector connector) &#123; this.connector = connector; &#125; public void onApplicationEvent(ContextClosedEvent contextClosedEvent) &#123; this.connector.pause(); Executor executor = this.connector.getProtocolHandler().getExecutor(); if (executor instanceof ThreadPoolExecutor) &#123; try &#123; log.info(&quot;Start to shutdown tomcat thread pool&quot;); ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor) executor; threadPoolExecutor.shutdown(); if (!threadPoolExecutor.awaitTermination(20, TimeUnit.SECONDS)) &#123; log.warn(&quot;Tomcat thread pool did not shutdown gracefully within 20 seconds. &quot;); &#125; &#125; catch (InterruptedException e) &#123; log.warn(&quot;Fail to shut down tomcat thread pool &quot;, e); &#125; &#125; &#125;&#125; Tomcat 自动装配123456789101112131415@Configuration@ConditionalOnClass(&#123;Servlet.class, Tomcat.class&#125;)public static class TomcatConfiguration &#123; @Bean public TomcatGracefulShutdown tomcatGracefulShutdown() &#123; return new TomcatGracefulShutdown(); &#125; @Bean public EmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory(TomcatGracefulShutdown gracefulShutdown) &#123; TomcatEmbeddedServletContainerFactory tomcatFactory = new TomcatEmbeddedServletContainerFactory(); tomcatFactory.addConnectorCustomizers(gracefulShutdown); return tomcatFactory; &#125;&#125; 完结","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"https://qdteng.online/tags/springboot/"},{"name":"actuator","slug":"actuator","permalink":"https://qdteng.online/tags/actuator/"},{"name":"java","slug":"java","permalink":"https://qdteng.online/tags/java/"}]},{"title":"nginx日志","slug":"nginx日志","date":"2024-10-16T00:31:18.000Z","updated":"2025-02-20T06:00:08.104Z","comments":true,"path":"2024/10/16/nginx日志/","permalink":"https://qdteng.online/2024/10/16/nginx%E6%97%A5%E5%BF%97/","excerpt":"","text":"Nignx的日志类型我们进入到nginx目录下的log目录中，可以看到里面存放着三个文件，分别是access.log，error.log和nginx.pid文件，其中nginx.pid是用来记录当前nginx进程的pid号的，不属于日志文件。真正属于日志文件的是另外两个文件。 123-rw-r--r-- 1 root root 90261926 Jun 9 09:38 access.log-rw-r--r-- 1 root root 21159964 Jun 8 16:36 error.log-rw-r--r-- 1 root root 5 May 24 15:18 nginx.pid access.log日志文件1、access.log文件的介绍access文件用于存放每个用户访问网站的请求日志，开发运维人员通过访问日志来分析用户的浏览器行为。默认情况下，nginx会在log目录下生成该文件，无需用户配置。 2、access.log的相关配置我们可以在$nginx_home&#x2F;conf&#x2F;nginx.conf配置文件中对nginx请求日志进行配置。配置的格式为： 1access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]]; 其中，access_log是关键字，表示接下来的配置是关于access日志的配置，path为该日志文件的存储路径，后面还可以对日志输出格式、是否压缩、日志刷新时间等设置进行配置。可能有读者会留意到，上面截图中的用例在path后面写上了main，其实这里的main并不是什么关键字，而是nginx默认定义好的一个日志格式名称，我们可以在log_format中看到，nginx默认定义了一个名为main的日志输出格式。 关于日志输出格式的配置nginx自带了一些变量，让我们能够作为日志输出格式进行配置，方便我们对用户的请求进行查询和统计。当然了，nginx其实默认的日志输出格式其实就已经把一些重要的请求参数保存到访问日志里面了，基本满足我们日常使用了，如果有需要可以根据下面的表单自定义配置所需要的日志格式。 参数 说明 示例 $remote_addr 客户端地址 211.28.65.253 $remote_user 客户端用户名称 – $time_local 访问时间和时区 18&#x2F;Jul&#x2F;2012:17:00:01 +0800 $request 请求的URI和HTTP协议 “GET &#x2F;article-10000.html HTTP&#x2F;1.1” $http_host 请求地址，即浏览器中你输入的地址（IP或域名） www.wang.com 192.168.100.100 $status HTTP请求状态 200 $upstream_status upstream状态 200 $body_bytes_sent 发送给客户端文件内容大小 1547 $http_referer URL跳转来源 https://www.baidu.com/ $http_user_agent 用户终端浏览器等信息 “Mozilla&#x2F;4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident&#x2F;4.0; SV1; GTB7.0; .NET4.0C;” $ssl_protocol SSL协议版本 TLSv1 $ssl_cipher 交换数据中的算法 RC4-SHA $upstream_addr 后台upstream的地址，即真正提供服务的主机地址 10.10.10.100:80 $request_time 整个请求的总时间 0.205 $upstream_response_time 请求过程中，upstream响应时间 0.002 下面我们来简单地自定义一个日志输出格式，并且应用起来。 步骤一：在http标签下新增一个log_format格式 步骤二：在server标签中应用定义新的access_log配置1234567server &#123; listen 9600; location / &#123; root html; access_log logs/mine_access.log mine_format; &#125;&#125; 步骤三：使用nginx -s reload重新加载配置文件（注意，如果这里提示说日志文件不存在的话，就自己先手动建一下文件即可）自己手动访问几次服务，就可以看到新生成的日志格式会和我们定义的日志格式一致了。 关于刷新时间的配置nginx默认情况下对访问日志是实时记录的，其实一定程度上来说是会占用cpu资源的，当然了大部分站点其实访问量并不大，所以实时记录日志所带来的性能消耗是可以忽略的。如果说对于访问量大且对性能要求较高的站点，可能会希望通过优化日志的输出频率来达到减少IO的效果。 1234location / &#123; root html; access_log logs/mine_access.gz mine_format gzip flush=5s;&#125; 我们可以看一下官方对这个配置的介绍配置完flush和buffer后，其实我们就相当于是有两个记录日志的节点了，一个是缓冲区满了，另外一个是到刷新日志的时间点了。缓冲区的存在使得nginx不需要针对每一个请求都做一次IO，可以节省一点系统资源。当然了，我们还可以开启gzip压缩（可选等级为1-9，级别越高压缩级别越高）来进一步减轻磁盘压力。 关闭访问日志的记录只需要配置access_log为off即可 1234location / &#123; root html; access_log off;&#125; error.log错误日志相比于访问日志来说，运维人员可能更加关注错误日志文件，错误日志文件记录了nginx运行过程中遇到的错误信息（注意，也包括用户请求没有正常响应的错误日志），向有时候我们nginx启动失败后，都可以在这个error日志中找到对应较为详情的报错信息。这里贴一下官网对error.log的介绍，该错误日志的配置格式为：error_log path level，error_log为关键字，path为日志保存的路径，level为日志级别。默认情况下nginx会在logs目录下建立一个名为error.log的日志文件，且日志级别为error。可选的日志级别配置从低到高分别为debug, info, notice, warn, error, crit, alert, emerg。我们可以简单演示一下，这个错误日志的用法 12345678server &#123; listen 9600; location / &#123; root html; access_log logs/mine_access.log mine_format; error_log logs/mine_error.log warn; &#125;&#125; 配置完后reload一下nginx配置，然后在浏览器中随意访问一下不存在的资源，我们就可以在日志文件里面看到相关的错误日志了。 Nignx的日志分割nginx默认是不会进行日志文件的分割操作的，也就是所有访问日志会一直往access.log文件里面追加，时间一长的话这个文件就会变得很大，nginx的性能也会降低,而且运维人员在查看当天文件的也很不方便。所以一般来说，我们都会选择按日对日志文件进行切割。 logrotate结合crontab日志切割 vi &#x2F;etc&#x2F;logrotate.d&#x2F;nginx 1234567891011121314151617181920/var/log/nginx/*.log /var/log/nginx/*.html &#123; minsize 1024M # 指定新建的日志文件权限以及所属用户和组 create 0644 nginx root # 每月一次切割,取代默认的一周 monthly #只保留一个日志. rotate 3 missingok dateext notifempty compress delaycompress sharedscripts postrotate if [ -f /usr/local/nginx/logs/nginx.pid ]; then kill -USR1 `cat /usr/local/nginx/logs/nginx.pid` fi endscript&#125; logrotate参数说明1234567891011121314151617181920212223# 配置 # 说明daily # 指定转储周期为每天weekly # 指定转储周期为每周monthly # 指定转储周期为每月rotate count # 指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份compress # 通过gzip 压缩转储以后的日志nocompress # 不做gzip压缩处理create mode owner group # 轮转时指定创建新文件的属性，如create 0777 nobody nobodynocreate # 不建立新的日志文件delaycompress # 和compress 一起使用时，转储的日志文件到下一次转储时才压缩nodelaycompress # 覆盖 delaycompress 选项，转储同时压缩missingok # 如果日志丢失，不报错继续滚动下一个日志ifempty # 即使日志文件为空文件也做轮转，这个是logrotate的缺省选项notifempty # 当日志文件为空时，不进行轮转mail address # 把转储的日志文件发送到指定的E-mail 地址olddir directory # 转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统noolddir # 转储后的日志文件和当前日志文件放在同一个目录下sharedscripts # 运行postrotate脚本，作用是在所有日志都轮转后统一执行一次脚本。如果没有配置这个，那么每个日志轮转后都会执行一次脚本prerotate # 在logrotate转储之前需要执行的指令，例如修改文件的属性等动作；必须独立成行postrotate # 在logrotate转储之后需要执行的指令，例如重新启动 (kill -HUP) 某个服务！必须独立成行dateext # 使用当期日期作为命名格式dateformat .%s # 配合dateext使用，紧跟在下一行出现，定义文件切割后的文件名，必须配合dateext使用，只支持 %Y %m %d %s 这四个参数size(minsize) log-size # 当日志文件到达指定的大小时才转储，log-size能指定bytes(缺省)及KB (sizek)或MB(sizem)，例如 size 100M 配置crontab定时任务crontab -e 配置 每月1日1点分割一次文件 10 0 1 1 * ? /usr/sbin/logrotate -vf /etc/logrotate.d/nginx 2024.12.27补充 Nginx日志分析goaccess[传送至官网] (https://goaccess.io/download) 定时生成10 0 * * * /usr/local/bin/goaccess -a -d -f /var/log/nginx/access.log -p /usr/local/etc/goaccess/goaccess.conf -o /var/log/nginx/goaccess.html 2&gt; /var/log/nginx/goaccess.log nginx日志保留1月logrotate 配置文件上文中已提到不在复述 10 0 1 1 * ? /usr/sbin/logrotate -vf /etc/logrotate.d/nginx","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://qdteng.online/tags/linux/"},{"name":"nginx","slug":"nginx","permalink":"https://qdteng.online/tags/nginx/"}]},{"title":"谈谈clickhouse优化","slug":"谈谈clickhouse优化","date":"2024-10-14T05:51:03.000Z","updated":"2024-11-02T01:08:26.305Z","comments":true,"path":"2024/10/14/谈谈clickhouse优化/","permalink":"https://qdteng.online/2024/10/14/%E8%B0%88%E8%B0%88clickhouse%E4%BC%98%E5%8C%96/","excerpt":"","text":"ClickHouse版本23.10.1.396 问题描述 情况如上图，项目运行一段时间，随着数据的累计，服务器内存占用率已经接近100%，通过top命令查看内存占用情况，发现clickhouse进程占用了80%的内存，导致服务器内存占用率接近100% 参考资料 [1] Clickhouse常见配置解析 [2] Clickhouse 参数优化配置 一轮优化 比较匆忙的看了资料，配置文件中有这样一个描述 ,于是将其改成了8G看看效果 123456789101112&lt;!-- Maximum memory usage (resident set size) for server process. Zero value or unset means default. Default is &quot;max_server_memory_usage_to_ram_ratio&quot; of available physical RAM. If the value is larger than &quot;max_server_memory_usage_to_ram_ratio&quot; of available physical RAM, it will be cut down. The constraint is checked on query execution time. If a query tries to allocate memory and the current memory usage plus allocation is greater than specified threshold, exception will be thrown. It is not practical to set this constraint to small values like just a few gigabytes, because memory allocator will keep this amount of memory in caches and the server will deny service of queries. --&gt;&lt;max_server_memory_usage&gt;8G&lt;/max_server_memory_usage&gt; 二轮优化 在运行了大概2个月之后，情况没有改善，内存仍然继续增长，但是本次的提示如上图超过的数值跟我文件中配置的数值有偏差，当然中间也尝试过配置使用类似 SET max_memory_usage &#x3D; 3 * 1024 * 1024 * 1024; 这样的语句去动态配置，但是使用如下语句查询返回还是没变化 1234567891011121314select * from `system`.settings where name in( &#x27;max_memory_usage_for_user&#x27;, &#x27;max_memory_usage&#x27;, &#x27;max_bytes_before_external_group_by&#x27;, &#x27;max_bytes_before_external_sort&#x27;, &#x27;max_memory_usage_for_all_queries&#x27;, &#x27;max_concurrent_queries_for_user&#x27;, &#x27;max_concurrent_queries_for_all_users&#x27;, &#x27;max_concurrent_queries&#x27;, &#x27;max_server_memory_usage&#x27;, &#x27;max_server_memory_usage_to_ram_ratio&#x27;, &#x27;max_thread_pool_size&#x27;, &#x27;distributed_aggregation_memory_efficient&#x27;); 后来增加了配置项 config.xml max_server_memory_usage_to_ram_ratio 这里按照总内存的百分比计算 1234&lt;clickhouse&gt; &lt;!-- On memory constrained environments you may have to set this to value larger than 1.--&gt; &lt;max_server_memory_usage_to_ram_ratio&gt;0.2&lt;/max_server_memory_usage_to_ram_ratio&gt;&lt;/clickhouse&gt; users.xml max_bytes_before_external_group_by max_bytes_before_external_sort 这里设置分组查询和排序时内存的最大使用阈值1G，超过使用硬盘 12345678&lt;clickhouse&gt; &lt;profiles&gt; &lt;default&gt; &lt;max_bytes_before_external_group_by&gt;1073741824&lt;/max_bytes_before_external_group_by&gt; &lt;max_bytes_before_external_sort&gt;1073741824&lt;/max_bytes_before_external_sort&gt; &lt;/default&gt; &lt;profiles&gt;&lt;/clickhouse&gt; 2024-10-14 15:08:09 后面跟进看看优化效果 三轮优化控制内存有点治标不治本，这次优化方面如下 控制集群节点的数据存储权重config.xml 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;clickhouse&gt; &lt;remote_servers&gt; &lt;cluster_3S_1R&gt; &lt;shard&gt; &lt;internal_replication&gt;true&lt;/internal_replication&gt; #权重 &lt;weight&gt;10&lt;/weight&gt; &lt;replica&gt; &lt;host&gt;...&lt;/host&gt; &lt;port&gt;...&lt;/port&gt; &lt;user&gt;...&lt;/user&gt; &lt;password&gt;...&lt;/password&gt; &lt;/replica&gt; &lt;/shard&gt; &lt;shard&gt; &lt;internal_replication&gt;true&lt;/internal_replication&gt; #权重 &lt;weight&gt;45&lt;/weight&gt; &lt;replica&gt; &lt;host&gt;...&lt;/host&gt; &lt;port&gt;...&lt;/port&gt; &lt;user&gt;...&lt;/user&gt; &lt;password&gt;...&lt;/password&gt; &lt;/replica&gt; &lt;/shard&gt; &lt;shard&gt; &lt;internal_replication&gt;true&lt;/internal_replication&gt; #权重 &lt;weight&gt;45&lt;/weight&gt; &lt;replica&gt; &lt;host&gt;...&lt;/host&gt; &lt;port&gt;...&lt;/port&gt; &lt;user&gt;...&lt;/user&gt; &lt;password&gt;...&lt;/password&gt; &lt;/replica&gt; &lt;/shard&gt; &lt;/cluster_3S_1R&gt; &lt;/remote_servers&gt;&lt;/clickhouse&gt; 控制数据的保存时间12alter table table_data on cluster cluster_3S_1R modify TTL create_time + toIntervalDay(45) ; 2024-11-02 09:00:09 后面跟进看看优化效果 完结","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"clickhouse","slug":"clickhouse","permalink":"https://qdteng.online/tags/clickhouse/"}]},{"title":"redis单机安装使用_linux","slug":"redis安装使用-linux","date":"2024-10-08T00:08:18.000Z","updated":"2024-10-23T00:49:53.455Z","comments":true,"path":"2024/10/08/redis安装使用-linux/","permalink":"https://qdteng.online/2024/10/08/redis%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8-linux/","excerpt":"","text":"参考资料 [1] Redis和AOF和RDB [2] bind与protected-mode参数 安装使用安装 首先，使用以下命令安装所有必需的依赖项： 1apt-get install wget curl gnupg -y 接下来，使用以下命令下载并添加 GPG 密钥： 1curl https://packages.redis.io/gpg | apt-key add - 接下来，使用以下命令添加 Redis 官方存储库： 1echo &quot;deb https://packages.redis.io/deb $(lsb_release -cs) main&quot; | tee /etc/apt/sources.list.d/redis.list 接下来，使用以下命令更新存储库缓存并安装 Redis： 12apt-get update -yapt-get install redis-server -y 安装 Redis 后，使用以下命令验证 Redis 安装： 1apt-cache policy redis-server 要启动 Redis 服务，请运行以下命令： 1systemctl start redis-server 要检查 Redis 服务的状态，请运行以下命令： 1systemctl status redis-server 配置默认情况下，Redis 侦听本地主机，如果要从远程主机连接 Redis，则需要允许 Redis 进行远程连接。 请使用您喜欢的编辑器编辑 Redis 配置文件： 1vi /etc/redis/redis.conf 注释掉以下行： 12#这里注释掉以下行，以允许其他ip链接#bind 127.0.0.1 -::1 接下来，设置Redis密码，如下所示： 12#这里设置redis需要开启密码访问requirepass securepassword 接下来，更改以下行： 123456#RBD的优点是，全量数据二进制文件，数据恢复快。 缺点是，可能会丢数据;AOF会将redis中每一步对数据修改的操作记录（日志）append到相应的文件中。#这里开启AOFappendonly yesappendfilename &quot;appendonly.aof&quot;#protected-mode(Redis本身的一个安全层),这里配置关闭protected-mode no 保存并关闭文件，然后重新启动 Redis 服务以应用更改： 1systemctl restart redis-server 使用连接Redis实例您可以使用 redis-cli 命令行实用程序从本地或远程计算机连接 Redis 服务器。在终端中输入以下命令来连接到Redis数据库： 12#redis-cli -h &lt;host&gt; -p &lt;port&gt; -a &lt;password&gt;redis-cli -h localhost -p 6379 -a mypassword 完结","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://qdteng.online/tags/linux/"},{"name":"debian","slug":"debian","permalink":"https://qdteng.online/tags/debian/"},{"name":"redis","slug":"redis","permalink":"https://qdteng.online/tags/redis/"}]},{"title":"esp32玩一玩","slug":"esp32玩一玩","date":"2024-10-07T00:15:29.000Z","updated":"2025-01-02T01:45:30.081Z","comments":true,"path":"2024/10/07/esp32玩一玩/","permalink":"https://qdteng.online/2024/10/07/esp32%E7%8E%A9%E4%B8%80%E7%8E%A9/","excerpt":"","text":"参考资料[1] ESP32和ESP8266比较有哪些不同？ [2] ESP32各型号比较 [3] ESP32C3SuperMini 引脚使用 [4] 使用VSCode与PlatformIO 温度传感器：DS18B20 接入添加电阻示例 双隔离电源5V12V esp32控制继电器 vs中 serial monitor 好用的串口调试插件 usb红白绿蓝 红白绿黑四根线分别是什么 红色－USB电源 标有－VCC、Power、5V、5VSB字样 白色－USB数据线（负）－DATA-、USBD-、PD-、USBDT+ 绿色－USB数据线（正）－DATA+、USBD+、PD+、USBDT+ 黑色&#x2F;蓝色－地线 －GND、Ground 其中的红、白、绿、黑是标准的配线颜色，分别对应1、2、3、4引脚。四根线分别是 1-电源 2-数据 3-数据 4-电源，一般的排列方式是：红白绿黑从左到右。 一些分标准的为红白绿蓝四根线。但是功能都是一样的。 oled点亮 完结","categories":[{"name":"后端","slug":"后端","permalink":"https://qdteng.online/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"IOT","slug":"IOT","permalink":"https://qdteng.online/tags/IOT/"},{"name":"ESP32","slug":"ESP32","permalink":"https://qdteng.online/tags/ESP32/"},{"name":"Arduino","slug":"Arduino","permalink":"https://qdteng.online/tags/Arduino/"},{"name":"PlatformIO","slug":"PlatformIO","permalink":"https://qdteng.online/tags/PlatformIO/"}]},{"title":"windows_server版本开启多用户同时远程登录","slug":"windows-server版本开启多用户同时远程登录","date":"2024-10-06T02:03:41.000Z","updated":"2024-10-06T02:49:41.078Z","comments":true,"path":"2024/10/06/windows-server版本开启多用户同时远程登录/","permalink":"https://qdteng.online/2024/10/06/windows-server%E7%89%88%E6%9C%AC%E5%BC%80%E5%90%AF%E5%A4%9A%E7%94%A8%E6%88%B7%E5%90%8C%E6%97%B6%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/","excerpt":"","text":"事情是这样的 你是不是也经常面临登陆windows server远程主机时，突然被断开，确认后是同事登陆了，然后又回来，又断开了。 开启多用户登录 参考资料 gpedit.msc 按照 计算机配置-&gt;管理模板-&gt;Windows 组件-&gt;远程桌面服务-&gt;远程桌面会话主机-&gt;连接 的路径，找到“将远程桌面服务的用户限制到单独的远程桌面会话”配置项： 选择“已禁用”选项，确定即可 完结","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://qdteng.online/tags/windows/"},{"name":"server","slug":"server","permalink":"https://qdteng.online/tags/server/"},{"name":"远程桌面","slug":"远程桌面","permalink":"https://qdteng.online/tags/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"}]},{"title":"mysql安装_windows","slug":"mysql安装-windows","date":"2024-10-03T01:37:04.000Z","updated":"2024-10-06T01:54:11.835Z","comments":true,"path":"2024/10/03/mysql安装-windows/","permalink":"https://qdteng.online/2024/10/03/mysql%E5%AE%89%E8%A3%85-windows/","excerpt":"","text":"参考资料 MySql免安装配置教程-CSDN Server和Installer有什么区别 MySQL Community Server 安装使用注意：绝对路径中要避免出现中文 my.ini放在mysql安装目录的根目录 my.ini 配置1234567891011121314151617181920212223242526272829[mysqld]# 设置3306端口port=3306#错误日志的路径log-error=D:\\\\software\\mysql-8.0.32-winx64\\\\mysql.error.log# 设置mysql的安装目录basedir=D:\\\\software\\mysql-8.0.32-winx64# 设置mysql数据库的数据的存放目录，data文件夹它会自行创建，不要自己手动创建datadir= D:\\\\software\\mysql-8.0.32-winx64\\Data# 允许最大连接数max_connections=200# 允许连接失败的次数。max_connect_errors=10# 服务端使用的字符集默认为utf8mb4character-set-server=utf8mb4# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# 默认使用“mysql_native_password”插件认证#mysql_native_passworddefault_authentication_plugin=mysql_native_password#解决groupby查询非groupby字段问题sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION[mysql]# 设置mysql客户端默认字符集default-character-set=utf8mb4[client]# 设置mysql客户端连接服务端时默认使用的端口port=3306default-character-set=utf8mb4 初始化数据库 12#命令行中会生成root的临时密码注意保存，首次登陆后需要修改mysqld --initialize --console 安装MySQL服务 123456#可以删除已有的服务名sc delete mysql5#创建一个指定服务名[mysql57]的服务mysqld --install mysql57#启动指定服务,启动失败可以查看 my.ini中配置的log-error错误日志net start mysql57 客户端连接123#指定ip 端口 用户 连接 mysql -u root -h 127.0.0.1 -P 3306 -p 5.7 用户操作 123456789101112#修改root密码alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123&#x27;;#允许root远程访问grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;123&#x27; with grant option;#添加用户create user &#x27;user&#x27;@&#x27;%&#x27; identified by &#x27;123&#x27;;#授权某个用户所有数据库所有权限grant all privileges on *.* to &#x27;user&#x27;@&#x27;%&#x27;;#删除用户drop user &#x27;user&#x27;@&#x27;%&#x27;;#刷新权限flush privileges; 8.* 用户操作 1234567891011121314#修改加密规则 防止一些可视化工具连接不兼容报错ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27; PASSWORD EXPIRE NEVER; #修改root密码ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;password&#x27;; #允许root远程访问GRANT ALL ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;#添加用户CREATE USER &#x27;用户名&#x27;@&#x27;%或者IP&#x27; IDENTIFIED BY &#x27;密码&#x27;;#授权某个用户所有数据库所有权限GRANT ALL PRIVILEGES ON *.* TO &#x27;用户名&#x27;@&#x27;IP/localhost/%&#x27;;#删除用户drop user &#x27;user&#x27;@&#x27;%&#x27;;#刷新权限flush privileges; 完结","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"mysql5.7.36","slug":"mysql5-7-36","permalink":"https://qdteng.online/tags/mysql5-7-36/"},{"name":"mysql","slug":"mysql","permalink":"https://qdteng.online/tags/mysql/"},{"name":"windows","slug":"windows","permalink":"https://qdteng.online/tags/windows/"}]},{"title":"navicat的另类使用","slug":"naviat的另类使用","date":"2024-09-29T13:21:44.000Z","updated":"2024-10-06T02:26:53.747Z","comments":true,"path":"2024/09/29/naviat的另类使用/","permalink":"https://qdteng.online/2024/09/29/naviat%E7%9A%84%E5%8F%A6%E7%B1%BB%E4%BD%BF%E7%94%A8/","excerpt":"","text":"事情是这样的比如项目中有一些报表需要定时生成excel，你又不想重复性操作电脑SQL查询 解决方式1.首先你得有个navicat 链接提取码：22b9 2.按需编写一段业务SQL 这个一般是个select 语句 3.看图作业1) 创建导出任务保存配置 2) 新建批处理作业 3) 邮件配置 4) 配置定时发送 完结","categories":[{"name":"后端","slug":"后端","permalink":"https://qdteng.online/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://qdteng.online/tags/windows/"},{"name":"naviat","slug":"naviat","permalink":"https://qdteng.online/tags/naviat/"},{"name":"定时","slug":"定时","permalink":"https://qdteng.online/tags/%E5%AE%9A%E6%97%B6/"},{"name":"报表","slug":"报表","permalink":"https://qdteng.online/tags/%E6%8A%A5%E8%A1%A8/"},{"name":"邮件","slug":"邮件","permalink":"https://qdteng.online/tags/%E9%82%AE%E4%BB%B6/"}]},{"title":"https自动更新","slug":"https自动更新","date":"2024-09-29T05:38:33.000Z","updated":"2025-01-21T07:01:53.505Z","comments":true,"path":"2024/09/29/https自动更新/","permalink":"https://qdteng.online/2024/09/29/https%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/","excerpt":"","text":"事情是这样的你是不是也有一年又一年的新项目接入,对于要求https协议的网站，每3个月的TSL证书更新需求都要自己手动去申请 参考资料 TLS证书 ACME协议 acme.sh 自动化部署证书 acme.sh 使用教程-CSDN博客 acme.sh安装使用源码安装：123456789101112git clone --depth 1 https://github.com/acmesh-official/acme.sh.git# 国内访问 github 便秘 就用gitee git clone --depth 1 https://gitee.com/neilpang/acme.sh.gitcd acme.sh# 请注意替换 username@example.com 为你自己的邮箱，避免无法收到上游证书的邮件通知。./acme.sh --install -m username@example.com# 安装完成后重新加载 Bashsource ~/.bashrc#检查是否生效 acme.sh -v# 更改默认 CA 颁发者为 Let’s Encryptacme.sh --set-default-ca --server letsencrypt 配置 DNS API需要先配置DNS 登陆阿里云控制台 - 访问控制 RAM - 身份管理-用户 创建用户-勾选 使用永久 AccessKey 访问 授权创建的用户 OpenAPI 、DNS 相关权限 通过以上配置后拿到key和secret acme.sh 程序目录为隐藏目录.acme.sh存放在当前用户家目录下.执行以下命令进入目录,并编辑account.conf,根据上文获取的 API 格式,复制粘贴到文件中保存. 123456cdcd .acme.shvi account.confexport Ali_Key=&quot;....&quot;export Ali_Secret=&quot;.....&quot; 自动更新脚本拿走详情见第4篇资料，此处用的阿里云 123456789101112#!/bin/bash# 备份旧证书/bin/cp -rf /usr/local/nginx/conf/cert/*.* /usr/local/nginx/conf/cert/sslbak# 使用 acme.sh 生成新证书,此处使用了绝对路径来运行acme脚本，请按照实际情况操作。/home/ecs-user是我当前用户的家目录。/root/.acme.sh/acme.sh --issue --dns dns_ali -d e1.test.com --fullchain-file /home/setup/sslkey/e1.test.com.pem --key-file /home/setup/sslkey/e1.test.com.key --force/root/.acme.sh/acme.sh --issue --dns dns_ali -d e2.test.com --fullchain-file /home/setup/sslkey/e2.test.com.pem --key-file /home/setup/sslkey/e2.test.com.key --force# 将新证书拷贝到 Nginx 证书目录/bin/cp -rf /home/setup/sslkey/* /usr/local/nginx/conf/cert# 重启 Nginx 以应用新证书（请根据实际情况选择适当的重启方式）/usr/sbin/nginx -s reload 完结","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"https","slug":"https","permalink":"https://qdteng.online/tags/https/"},{"name":"自动化","slug":"自动化","permalink":"https://qdteng.online/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"acme","slug":"acme","permalink":"https://qdteng.online/tags/acme/"}]},{"title":"好东西winlaunch","slug":"好东西winlaunch","date":"2024-09-28T01:59:48.000Z","updated":"2024-10-06T02:54:36.172Z","comments":true,"path":"2024/09/28/好东西winlaunch/","permalink":"https://qdteng.online/2024/09/28/%E5%A5%BD%E4%B8%9C%E8%A5%BFwinlaunch/","excerpt":"","text":"官网连接 使用你可以在这个软件中添加本机安装的软件连接，尤其是安装在非C盘的软件，在重装系统后依然可以继续使用 完结","categories":[{"name":"乱弹","slug":"乱弹","permalink":"https://qdteng.online/categories/%E4%B9%B1%E5%BC%B9/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://qdteng.online/tags/windows/"},{"name":"winlaunch","slug":"winlaunch","permalink":"https://qdteng.online/tags/winlaunch/"},{"name":"软件","slug":"软件","permalink":"https://qdteng.online/tags/%E8%BD%AF%E4%BB%B6/"}]},{"title":"非主流监控hertzbeat","slug":"非主流监控hertzbeat","date":"2024-09-27T12:50:35.000Z","updated":"2024-10-07T00:17:54.390Z","comments":true,"path":"2024/09/27/非主流监控hertzbeat/","permalink":"https://qdteng.online/2024/09/27/%E9%9D%9E%E4%B8%BB%E6%B5%81%E7%9B%91%E6%8E%A7hertzbeat/","excerpt":"","text":"事情是这样的一年又一年的项目积累下来如何实时监控项目的运行状态？尤其是跨机房、服务器运营商的各种项目 http式远程监控使用 Apache HertzBeat 入门资料 默认账号密码 admin&#x2F;hertzbeat 推荐docker运行 1docker run -d -p 1157:1157 -p 1158:1158 --name hertzbeat apache/hertzbeat 运行后像下图那么一配置，以后再也不怕吃饭睡觉不知道哪个服务无法访问了 监控中心-应用服务监控-HTTP API 告警-消息通知-通知策略-新增通知策略 完结","categories":[{"name":"后端","slug":"后端","permalink":"https://qdteng.online/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"监控","slug":"监控","permalink":"https://qdteng.online/tags/%E7%9B%91%E6%8E%A7/"},{"name":"运维","slug":"运维","permalink":"https://qdteng.online/tags/%E8%BF%90%E7%BB%B4/"},{"name":"Hertzbeat","slug":"Hertzbeat","permalink":"https://qdteng.online/tags/Hertzbeat/"},{"name":"第三方应用监控","slug":"第三方应用监控","permalink":"https://qdteng.online/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/"}]},{"title":"微信转账到零钱","slug":"微信转账到零钱","date":"2024-09-27T12:25:37.000Z","updated":"2024-10-06T03:26:06.771Z","comments":true,"path":"2024/09/27/微信转账到零钱/","permalink":"https://qdteng.online/2024/09/27/%E5%BE%AE%E4%BF%A1%E8%BD%AC%E8%B4%A6%E5%88%B0%E9%9B%B6%E9%92%B1/","excerpt":"","text":"参考资料 商家转账到零钱 问题解决异步返回解密失败 这个支付返回异步通知在本机可正确解密，但是服务器上解密失败。123456解析付款通知出错：支付通知回调，验签、解密失败---&gt;Processing WechatPay notification,signature verification failed,signType[WECHATPAY2-SHA256-RSA2048] serial[***] message[1727406002DcQqYFLpu2R7SEYz4mH9bDbtoaPlkexC&#123;&quot;id&quot;:&quot;13bfc133-d1be-5b53-8b90-388863c93e03&quot;,&quot;create_time&quot;:&quot;2024-09-27T10:59:55+08:00&quot;,&quot;resource_type&quot;:&quot;encrypt-resource&quot;,&quot;event_type&quot;:&quot;MCHTRANSFER.BATCH.FINISHED&quot;,&quot;summary&quot;:&quot;鍟嗗杞处鎵规瀹屾垚閫氱煡&quot;,&quot;resource&quot;:&#123;&quot;original_type&quot;:&quot;mch_payment&quot;,&quot;algorithm&quot;:&quot;AEAD_AES_256_GCM&quot;,&quot;ciphertext&quot;:&quot;JoUNycXeCGxbi+ptvs1o4lFlwMdvtuzwStCafdPqmjOE0YZyqZNlJtXeM03EYG+PmjRYevDQtP/l6IhOCoMDGYIBGfRaKT2WrF+81s0VyIqtVaFau0phz4gisangLIA2NMu5OSIHAOhau42NtWvwpPxOO9L6ImQg800qNq9ZthLMSBJ5qJMU5qj1MbdTuHLw8a/BdZ/o62HdJrrsHbRlx9MqYHIJca+ZCFxRAjJOzj0XlltkBUPnavxMCyvDdYi80/PyazIE/z2u7RdzIUBpb8inmVMRfu9raGc289qqMRWUL6AggxNQc/K2PdImBq+aNPUE2/Kze7TcqL6wd1TvNqYDDrRHLd81VpTZm7+ChCjwW+upfZKiC/8BpO03zUZ67Q37ubC7SdSKaUN98/F777Gdx2IbbX8X16iRGOGOhxsoXqobLuGqRfmA6ruo&quot;,&quot;associated_data&quot;:&quot;mch_payment&quot;,&quot;nonce&quot;:&quot;ZpKjEmbKoTZt&quot;&#125;&#125;] sign[BgLPsyZDaqGM2ObRYaiYjEqwWg+8gpxeWJvhxjRzhyzQh36Xbx6Ff+Rj8urrSSMpEU0/fSjw+GLiFH5wD5Ldf2tnQW520TEWPafMEJNE0cQkKqP8iWT3tkoU+tXclhjYL7XQj1KyU/3MaZ8z0Eb2q7x7iuGWuGX3ANz14skL7jo+tzdL9nx37XlbKiEjXJiOU6kQNhj4jAacqisIj5yGx2zgvGFDsE0DvawbjwdYQFnX9hUZMrEQJINmReQ4alKAW4TShCkxpATGOUaRlRMvcs3gvqJ+bVJJBd6Zrb4IOE7XwmGhKY7vjYBXfQUaYQiaaXM7qTqiwcyvR1LGmRZTvQ==] 解决思路依次排查 nginx、request params、request body、配置文件编码、jdk版本、java运行编码最终确认问题是java运行spring boot的编码问题。 对比方式 运行命令中添加编码 -Dfile.encoding&#x3D;utf-8 1java -Dfile.encoding=utf-8 -jar %JAVA_JAR% --server.port=18085 --spring.profiles.active=prd 完结","categories":[{"name":"后端","slug":"后端","permalink":"https://qdteng.online/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"微信","slug":"微信","permalink":"https://qdteng.online/tags/%E5%BE%AE%E4%BF%A1/"},{"name":"微信支付","slug":"微信支付","permalink":"https://qdteng.online/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"},{"name":"wecht pay","slug":"wecht-pay","permalink":"https://qdteng.online/tags/wecht-pay/"}]},{"title":"apache-nifi","slug":"apache-nifi","date":"2024-09-25T12:21:05.000Z","updated":"2024-10-05T08:51:37.506Z","comments":true,"path":"2024/09/25/apache-nifi/","permalink":"https://qdteng.online/2024/09/25/apache-nifi/","excerpt":"","text":"Apache NiFi介绍Apache NiFi 是一个开源的流式数据处理平台，用于收集、转换和路由数据。它使用户能够轻松地创建、监控和监控数据管道，从而实现数据收集、转换和路由。更详细的介绍请移步Apache NiFi 官网 and Apache NiFi 如何从入门到不放弃 。为什么不是 canal、flume、spark 、flink？ 在我看来不同的业务场景使用的工具也不尽相同，我尤其喜欢nifi的颜值 安装部署相关环境 Debian 11 JDK 22 NIFI 2.0.0-M3 至于具体安装步骤 可参考 NIFI 2.0.0版本HTTPS访问部署此处着重强调关于https问题，nifi的https端口为9443，但是默认的证书是自签名的，所以需要修改证书，否则无法访问。因项目中存在多个部署环境，经常会修改nifi的访问ip所以根据需要写了个证书替换的脚本 nifi 证书替换脚本1234567891011121314# nifi 证书替换脚本#!/bin/bashlastip=&quot;192.168.2.4&quot;newip=&quot;1.1.1.1&quot;password=&quot;abcdef123456&quot;sed -i &quot;s/$lastip/$newip/g&quot; nifi.propertiesrm -rf nifi.crt nifi.csr nifi.key nifi.p12openssl genpkey -algorithm RSA -out nifi.keyopenssl req -new -key nifi.key -out nifi.csr -subj &quot;/C=US/ST=California/L=San Francisco/O=My Company/CN=$newip&quot;openssl x509 -req -days 3650 -in nifi.csr -signkey nifi.key -out nifi.crtopenssl pkcs12 -export -in nifi.crt -inkey nifi.key -out nifi.p12 -name nifi -password pass:$password 自定义NIFI流程模板导入导出","categories":[{"name":"后端","slug":"后端","permalink":"https://qdteng.online/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"Apache","slug":"Apache","permalink":"https://qdteng.online/tags/Apache/"},{"name":"Nifi","slug":"Nifi","permalink":"https://qdteng.online/tags/Nifi/"},{"name":"Java","slug":"Java","permalink":"https://qdteng.online/tags/Java/"},{"name":"大数据","slug":"大数据","permalink":"https://qdteng.online/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"ETL","slug":"ETL","permalink":"https://qdteng.online/tags/ETL/"}]},{"title":"mybatis中使用DDL语句对clickhouse操作","slug":"mybatis中使用DDL语句对clickhouse操作","date":"2024-09-24T11:55:56.000Z","updated":"2024-10-06T01:01:59.170Z","comments":true,"path":"2024/09/24/mybatis中使用DDL语句对clickhouse操作/","permalink":"https://qdteng.online/2024/09/24/mybatis%E4%B8%AD%E4%BD%BF%E7%94%A8DDL%E8%AF%AD%E5%8F%A5%E5%AF%B9clickhouse%E6%93%8D%E4%BD%9C/","excerpt":"","text":"前置准备mybatisplus spring boot 多数据源配置pom.xml 添加引用12345&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;dynamic-datasource-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.5.2&lt;/version&gt;&lt;/dependency&gt; application.yml 配置123456789101112131415161718192021222324252627spring: datasource: druid: stat-view-servlet: enabled: true dynamic: # 配置全局druid参数，请按需配置 druid: initial-size: 5 max-active: 8 min-idle: 3 max-wait: 1000 validation-query: &#x27;select 1&#x27; primary: master datasource: #mysql数据库 master: username: root password: *** url: jdbc:mysql://1.1.1.1:3306/weilai_crawl?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8 driver-class-name: com.mysql.cj.jdbc.Driver #clickhouse数据库 slave_1: url: jdbc:clickhouse://1.1.1.1:8123/default?use_server_time_zone=true&amp;use_server_time_zone=false username: default password: **** driver-class-name: com.clickhouse.jdbc.ClickHouseDriver ClickHousee DDL 问题问题描述在使用mybatis 调用update 方法执行clickhouse的ddl建表语句时出现异常 ,mybatis有sql语句的校验，对于clickhouse语法部分关键字不能识别，所以导致sql解析错误，找了半天mybatisplus组件好像没有解决办法。只能换了个思路通过mybatis获取数据源的jdbc connection，使用JDBC来执行DDL语句 1234567891011121314151617181920Caused by: org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: ### Error updating database. Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Failed to process, Error SQL: CREATE TABLE device_data_all_history ( `sys_id` String , `dev_id` String , `create_time` DateTime DEFAULT now() , `insert_time` DateTime DEFAULT now() , `c1` String )ENGINE = MergeTreePARTITION BY toYYYYMMDD(create_time)ORDER BY (dev_id, create_time)SETTINGS index_granularity = 8192Caused by: net.sf.jsqlparser.parser.ParseException: Encountered unexpected token: &quot;ORDER&quot; &quot;ORDER&quot; at line 4, column 4.Was expecting one of: &quot;;&quot; &quot;AS&quot; &quot;DISABLE&quot; &quot;ENABLE&quot; &quot;LIKE&quot; &lt;EOF&gt; 解决方式mybatisPlus 多数据源获取 JDBC Connection123456789101112131415@Autowiredprivate DynamicRoutingDataSource dynamicRoutingDataSource;//某业务方法.....()&#123; //clickhouse 建表语句 String sql =&quot;create table ..... &quot; ; //获取数据源 Connection java.sql.Connection connection = dynamicRoutingDataSource.getDataSource(&quot;slave_1&quot;).getConnection(); connection.setAutoCommit(true); java.sql.Statement statement =connection.createStatement(); statement.execute(sql); statement.close(); connection.close();&#125; 完结","categories":[{"name":"后端","slug":"后端","permalink":"https://qdteng.online/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"clickhouse","slug":"clickhouse","permalink":"https://qdteng.online/tags/clickhouse/"},{"name":"mybatis","slug":"mybatis","permalink":"https://qdteng.online/tags/mybatis/"},{"name":"多数据源","slug":"多数据源","permalink":"https://qdteng.online/tags/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"}]},{"title":"h2数据库备份","slug":"h2数据库备份","date":"2024-09-23T03:01:08.000Z","updated":"2024-10-05T08:50:52.673Z","comments":true,"path":"2024/09/23/h2数据库备份/","permalink":"https://qdteng.online/2024/09/23/h2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD/","excerpt":"","text":"LinuxH2数据库备份1234567891011121314151617181920212223242526272829#!/bin/bashBACKUP=/home/dbbackTMPBACKUP=/tmp/dbbackDATETIME=$(date +%Y%m%d%H%M%S)# 打印日志function log_correct () &#123; USER=$(whoami) echo &quot;$&#123;DATETIME&#125; $&#123;USER&#125; execute $0 [INFO] $@ &quot; &gt;&gt; &quot;/home/shell/backup_log.txt&quot;&#125;# 创建备份目录mkdir -p &quot;$&#123;TMPBACKUP&#125;/$DATETIME&quot;cd $&#123;TMPBACKUP&#125;/$DATETIME/cp /home/java/xzl/h2/* ./tar -cvf $DATETIME.tar *.dbmv $DATETIME.tar $BACKUPcd $BACKUP# 删除7天前的文件#find $BACKUP -type f -mtime +7 -exec rm -f &#123;&#125; \\;log_correct &quot;数据库备份到：$&#123;BACKUP&#125; 下&quot; 完结","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://qdteng.online/tags/linux/"},{"name":"h2","slug":"h2","permalink":"https://qdteng.online/tags/h2/"}]},{"title":"mysq备份脚本","slug":"mysq备份脚本","date":"2024-09-23T02:45:09.000Z","updated":"2024-10-06T01:55:06.211Z","comments":true,"path":"2024/09/23/mysq备份脚本/","permalink":"https://qdteng.online/2024/09/23/mysq%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/","excerpt":"","text":"Linux debian 7z压缩安装 1sudo apt-get install p7zip p7zip-full p7zip-rar 备份mysql所有数据库,7z打包,保留7天文件 123456789101112131415161718192021222324252627282930313233 #!/bin/bash# MySQL配置MYSQL_IP=&quot;127.0.0.1&quot;MYSQL_PORT=&quot;3306&quot;MYSQL_USER=&quot;root&quot;MYSQL_PASSWORD=&quot;111111&quot;# 备份配置BACKUP_DIR=&quot;/home/dbback&quot; # 修改为实际备份目录DATE_STAMP=$(date +&quot;%Y%m%d%H%M%S&quot;)TODAY=$(date +&quot;%Y%m%d&quot;)# 创建备份目录mkdir -p $BACKUP_DIR# 获取所有数据库名称DATABASES=$(mysql -h $MYSQL_IP -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD -e &#x27;SHOW DATABASES;&#x27; | grep -vE &#x27;^Database|^information_schema|^performance_schema|^mysql|^sys&#x27;)# 遍历每个数据库进行备份for db in $DATABASES; do mysqldump -h $MYSQL_IP -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD $db &gt; &quot;$BACKUP_DIR/$db-$DATE_STAMP.sql&quot;done# 打包成7z文件7z a &quot;$BACKUP_DIR/dbbackup-$DATE_STAMP.7z&quot; &quot;$BACKUP_DIR&quot;/*.sql# 清理旧备份find $BACKUP_DIR -name &quot;*.7z&quot; -type f -mtime +7 -exec rm &#123;&#125; \\;find $BACKUP_DIR -name &quot;*.sql&quot; -type f -mtime +7 -exec rm &#123;&#125; \\;echo &quot;Backup completed and old backups cleaned.&quot; Windowmysql 单个数据库备份，并使用rar打包，保留7天数据 1234567891011121314151617@echo offset &quot;Ymd=%date:~,4%%date:~5,2%%date:~8,2%&quot;set WINRAR=C:\\Program Files\\WinRAR\\WinRAR.exeset MYSQLDUMP_PATH=C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\\mysqldump.exeset BACKUP_PATH=c:\\dbback\\set DB_NAME=testset DBPASSWORD=111111:: 备份&quot;%MYSQLDUMP_PATH%&quot; --opt -u root --password=%DBPASSWORD% %DB_NAME% &gt; %BACKUP_PATH%%DB_NAME%_%Ymd%.sql&quot;%WINRAR%&quot; a -afrar -ep1 -df &quot;%BACKUP_PATH%%DB_NAME%_%Ymd%.zip&quot; &quot;%BACKUP_PATH%%DB_NAME%_%Ymd%.sql&quot; &amp;&amp; del %BACKUP_PATH%%DB_NAME%_%Ymd%.sql:: 删除大于7天的forfiles /p %BACKUP_PATH% /s /d -7 /c &quot;cmd /c del/f/s/q @path&quot;@echo on 完结","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://qdteng.online/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"https://qdteng.online/tags/mysql/"},{"name":"debian","slug":"debian","permalink":"https://qdteng.online/tags/debian/"}]},{"title":"clickhouse 的导入导出","slug":"linux-clickhouse备份脚本","date":"2024-09-23T02:16:21.000Z","updated":"2024-10-05T08:50:52.596Z","comments":true,"path":"2024/09/23/linux-clickhouse备份脚本/","permalink":"https://qdteng.online/2024/09/23/linux-clickhouse%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/","excerpt":"","text":"linux备份脚本 可将以下内容复制到backCk.sh 添加可执行权限1234567891011121314151617181920212223242526272829303132333435#!/bin/bash# 定义属性PASSWORD=&quot;111111&quot;BACKUP=/home/dbbackTMPBACKUP=/tmp/ckdbbackDATETIME=$(date +%Y%m%d%H%M%S)# 打印日志function log_correct () &#123; USER=$(whoami) echo &quot;$&#123;DATETIME&#125; $&#123;USER&#125; execute $0 [INFO] $@ &quot; &gt;&gt; &quot;/home/shell/backup_log.txt&quot;&#125;log_correct &quot;开始执行 CK 备份任务&quot;# 创建备份目录mkdir -p &quot;$&#123;TMPBACKUP&#125;/$DATETIME&quot;cd $&#123;TMPBACKUP&#125;/$DATETIME/clickhouse-client --user=default --password=$PASSWORD --query=&quot;SELECT * FROM test INTO OUTFILE &#x27;./test.binary&#x27; FORMAT RowBinary&quot;tar -cvf &quot;CKBACK_$DATETIME.tar&quot; *.binarymv &quot;CKBACK_$DATETIME.tar&quot; $BACKUPlog_correct &quot;数据库【CK】已备份到：$&#123;BACKUP&#125; 下&quot;rm -rf $TMPBACKUP# 删除7天前的文件#find $BACKUP -type f -mtime +7 -exec rm -f &#123;&#125; \\;log_correct &quot;完成 CK 备份任务&quot; 还原导出的备份数据1234#登陆到clickhouseclickhouse-client --host 127.0.0.1 --port 9000 --user default --password &quot;111111&quot;#从备份文件还原数据INSERT INTO weilai.sd_chukou FROM INFILE &#x27;/ckback/test.binary&#x27; FORMAT RowBinary Windowsdocker下运行clickhouse的备份脚本1234567891011121314151617181920212223@title CK backup start@echo offsetlocal enabledelayedexpansion@color 0a:: --------------------参数设置------------------------:: 设置时间变量echo --------------------CK备份开始--------------------set YEAR=%date:~0,4%set MONTH=%date:~5,2%set DAY=%date:~8,2%:: 如果在 dos 下输入 time 返回的不是 24 小时制（没有 0 填充），请自行修改此处 set HOUR=%time:~0,2%set MINUTE=%time:~3,2%set SECOND=%time:~6,2%set &quot;Ymd=%YEAR%%MONTH%%DAY%&quot;docker exec -it --user root 800d5e4b1667 bash -c &quot; clickhouse-client --user=default --password=111111 --query=\\&quot;SELECT * FROM test INTO OUTFILE &#x27;/var/log/clickhouse-server/test%Ymd%.binary&#x27; FORMAT RowBinary\\&quot; &quot;:: --------------------结束备份------------------------@echo on 完结","categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://qdteng.online/tags/linux/"},{"name":"clickhouse","slug":"clickhouse","permalink":"https://qdteng.online/tags/clickhouse/"},{"name":"docker","slug":"docker","permalink":"https://qdteng.online/tags/docker/"},{"name":"shell","slug":"shell","permalink":"https://qdteng.online/tags/shell/"},{"name":"bat","slug":"bat","permalink":"https://qdteng.online/tags/bat/"}]},{"title":"怎样创建一个像这样的博客","slug":"hello-world","date":"2024-09-22T08:29:13.928Z","updated":"2024-10-05T08:50:52.764Z","comments":true,"path":"2024/09/22/hello-world/","permalink":"https://qdteng.online/2024/09/22/hello-world/","excerpt":"","text":"新世界事情是这样的 综上有图真相所述，有些博客或者笔记前期好用是好用就是有可能后期费点钱或者功夫(属于前期英雄)，为了你好我好大家好（方便阅读’baipiao’）于是便有了本站 使用是这样的更多的资料建议bing或google hexo github Pages 关键字 GitHub Pages 的主要特点 免费托管： GitHub Pages 提供免费的静态网站托管服务，允许用户将自己的网站内容托管在 GitHub 上，用户不需要支付额外的托管费用； 使用简单： 创建和管理 GitHub Pages 静态网站相对简单，特别是对于熟悉 GitHub 的用户来说，用户只需在自己的 GitHub 帐户中创建一个特定名称的仓库，将网站文件上传到该仓库即可； 自定义域名： 用户可以选择使用自定义域名来访问他们的 GitHub Pages 网站，这使得它们更适合个人网站、博客和项目页面； 支持多种静态网站生成工具： GitHub Pages 支持多种静态网站生成工具，如 Jekyll、Hugo、Gatsby 等，以及纯HTML、CSS 和 JavaScript 等前端技术，这使得用户能够根据自己的需求选择适合他们的工具； 自动构建： GitHub Pages 可以自动构建用户上传的网站内容，无需用户手动生成或编译网页，这使得发布网站变得更加简单。 对于开发人员和技术爱好者来说，GitHub Pages 是一个很好的选择，用于托管个人网站、博客、文档、项目页面等静态内容，它提供了一个方便的方式来分享和展示自己的作品。 Github Pages网站类型 在搭建前，默认已经注册成功了Github用户，现在开始根据官网教程一步一步的搭建。 GithubPages的站点类型有几种： 个人或组织站点（User or Organization sites）：对于个人或组织站点，每个GitHub用户或组织只能有一个站点，它通常使用username.github.io或organizationname.github.io的格式，这是GitHub Pages的默认站点，通常用于个人网站、博客等。 项目站点（Project sites）：对于项目站点，每个GitHub仓库可以有一个关联的GitHub Pages站点，这意味着对于每个项目，您可以创建一个独立的GitHub Pages站点，无需限制。 GitHub 创建个人（组织）类型的网站 Step1： 新建一个项目登录Github：https://github.com/，在顶部菜单栏点击“+”，然后“New repository”新建仓库，输入项目的相关信息，然后“Create repository”创建仓库： 注意： Repository name 格式必须为 用户名.github.io 仓库类型为Public Step2： 将自己的静态站点文件上传到仓库中 关于github如何上传文件，具体可bing 一下，本站采用hexo生成，并上传，接下来更精彩 Step3： 访问 大概等待几十秒，访问：https:&#x2F;&#x2F;用户名.github.io&#x2F;，即可部署第一个属于自己的静态网站了，可以看到部署成功了，本站地址（https://qdteng-cn.github.io） 静态网站生成工具以下是一些GitHub Pages支持的主要静态网站生成工具： Jekyll（https://jekyllrb.com）： Jekyll是GitHub Pages的默认静态网站生成工具，它使用Markdown文件和Liquid模板引擎来创建静态网站，Jekyll对于博客和文档站点非常流行。 Hugo（https://gohugo.io/）： Hugo是另一个受欢迎的静态网站生成工具，它非常快速且易于使用，它使用Go语言编写，支持多种主题和内容组织方式。 Gatsby（https://www.gatsbyjs.com/）： Gatsby是基于React的静态网站生成工具，它可以构建高性能、现代化的网站，Gatsby适用于博客、电子商务、应用程序文档等。 VuePress（https://vuepress.vuejs.org/）： VuePress是Vue.js驱动的静态网站生成工具，专注于文档站点，它支持Markdown文件和Vue组件。 Hexo（https://hexo.io/）： Hexo是一个快速、简单的博客框架，使用Markdown文件来生成静态博客，它是Node.js应用程序。 Pelican（https://blog.getpelican.com/）： Pelican是使用Python编写的静态网站生成器，适用于博客和文档。 Middleman（https://middlemanapp.com/）： Middleman是Ruby编写的静态网站生成工具，支持多种模板和数据源，适用于各种项目。 Sphinx（https://www.sphinx-doc.org/）： Sphinx是一个Python文档生成工具，通常用于技术文档和文档站点。 MkDocs（https://www.mkdocs.org）： MkDocs是Python编写的文档生成工具，使用Markdown文件创建文档站点。 Hexo生成静态网站前面提到Hexo是node.js应用程序，前期的node环境准备在这不再详述，不熟悉的同学建议先了解一下 node 、npm 、nvm Hexo官网 以下准了一些 hexo 的常用node命令行 12345678npm install hexo-cli -g // hexo的安装hexo init blog //初始化项目hexo clean //清空已经存在的hexo网站文件hexo generate(可简写g) //依据网页文件和新的css样式生成新的网站文件hexo server(可简写为s) //启动本地服务器，可以在localhost：4000查看网站修改效果hexo new &quot;我的第一篇文章&quot; //创建一篇文章，根目录的source里面的md文件可以修改文章内容npm install hexo-deployer-git --save //安装上传到仓库的插件，才能进行发布文章的命令hexo g --d //发布文章 一键部署并推送到gitee仓库上 Hexo更换主题官方主题库直达链接： Themes | Hexo 下载响应的主题包后 放到 &#x2F;themes&#x2F; 目录下 修改&#x2F;_config.yml文件 域名指向阿里云域名CNAME指向 Github配置使用自定义域名 备选方案gitee的pages （后来下线了，具体上线时间不详） gitlab的pages （看起来有点麻烦，国内的应该访问速度较好） 如果github也收费了 （我不介意买个域名+网站空间） 日常使用以前 免费的Typora用着还可以，后来收费了；换成了 markText+picgo picText是用来编辑marketdown格式编辑器，因为markdown对图片的支持仅限本地，尤其发布到网站时容易丢掉图片所以建议使用图床软件引用云服务，免费的服务可以用github，但是国内不是很友好，所以免费的图床策略可以用picgo+github+jsdelivr ;jsdelivr是个免费的cdn服务。像阿里云、七牛、腾讯等等收费的云服务都很好用就是有点费人民币 写完文件 后 是不是希望有个一键发布的脚本 ？ 新建一个.sh 或者 .bat 文件将如下代码放入也就OK了，或者记忆力好直接敲命令行也很OK 1hexo g --d 尼卡 自乔伊·波伊之后的过去800年间，橡胶果实从未有过「觉醒」之事，而如今橡胶果实成功「觉醒」，并显现出“太阳神尼卡”之姿。 尼卡的身体具有橡胶的特性，可以用任何方式战斗，无论走到哪里，他都能让人们绽放笑容。尼卡是“解放的战士”，因其推翻奴隶主的压迫，解放被奴役的人们，并建立巨大王国的功绩也被称为“太阳神尼卡”。当能力者的身心与“能力”相匹配时就会觉醒，觉醒后会给橡胶的肉体带来更上一层的“腕力”和“自由”，据说那是世上最匪夷所思的能力，在路飞成为能力者之前的几百年从未觉醒过。 忙了半天是不是希望自己的博客有个个性的icon？资深海贼迷推荐给你一款在线PS用来扣取自己感兴趣的图标用作自己的网站，我就厉害了把草帽扣下来了 【在线PS】PS软件网页版，ps在线图片处理工具photopea-稿定设计PS 完结","categories":[{"name":"乱弹","slug":"乱弹","permalink":"https://qdteng.online/categories/%E4%B9%B1%E5%BC%B9/"}],"tags":[{"name":"乱弹","slug":"乱弹","permalink":"https://qdteng.online/tags/%E4%B9%B1%E5%BC%B9/"},{"name":"建站","slug":"建站","permalink":"https://qdteng.online/tags/%E5%BB%BA%E7%AB%99/"}]}],"categories":[{"name":"运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"},{"name":"乱弹","slug":"乱弹","permalink":"https://qdteng.online/categories/%E4%B9%B1%E5%BC%B9/"},{"name":"后端","slug":"后端","permalink":"https://qdteng.online/categories/%E5%90%8E%E7%AB%AF/"},{"name":"-运维","slug":"运维","permalink":"https://qdteng.online/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"公网ip屏蔽","slug":"公网ip屏蔽","permalink":"https://qdteng.online/tags/%E5%85%AC%E7%BD%91ip%E5%B1%8F%E8%94%BD/"},{"name":"linux安全","slug":"linux安全","permalink":"https://qdteng.online/tags/linux%E5%AE%89%E5%85%A8/"},{"name":"linux防火墙","slug":"linux防火墙","permalink":"https://qdteng.online/tags/linux%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"国家屏蔽","slug":"国家屏蔽","permalink":"https://qdteng.online/tags/%E5%9B%BD%E5%AE%B6%E5%B1%8F%E8%94%BD/"},{"name":"视频剪辑","slug":"视频剪辑","permalink":"https://qdteng.online/tags/%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/"},{"name":"LosslessCut","slug":"LosslessCut","permalink":"https://qdteng.online/tags/LosslessCut/"},{"name":"OpenShot","slug":"OpenShot","permalink":"https://qdteng.online/tags/OpenShot/"},{"name":"HandBrake","slug":"HandBrake","permalink":"https://qdteng.online/tags/HandBrake/"},{"name":"java-ocr","slug":"java-ocr","permalink":"https://qdteng.online/tags/java-ocr/"},{"name":"乱弹","slug":"乱弹","permalink":"https://qdteng.online/tags/%E4%B9%B1%E5%BC%B9/"},{"name":"windows","slug":"windows","permalink":"https://qdteng.online/tags/windows/"},{"name":"windowsC盘满了","slug":"windowsC盘满了","permalink":"https://qdteng.online/tags/windowsC%E7%9B%98%E6%BB%A1%E4%BA%86/"},{"name":"windows AppData","slug":"windows-AppData","permalink":"https://qdteng.online/tags/windows-AppData/"},{"name":"本地时间同步","slug":"本地时间同步","permalink":"https://qdteng.online/tags/%E6%9C%AC%E5%9C%B0%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"},{"name":"chrony","slug":"chrony","permalink":"https://qdteng.online/tags/chrony/"},{"name":"linux集群时间同步","slug":"linux集群时间同步","permalink":"https://qdteng.online/tags/linux%E9%9B%86%E7%BE%A4%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"},{"name":"AI","slug":"AI","permalink":"https://qdteng.online/tags/AI/"},{"name":"大模型","slug":"大模型","permalink":"https://qdteng.online/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"},{"name":"本地智库","slug":"本地智库","permalink":"https://qdteng.online/tags/%E6%9C%AC%E5%9C%B0%E6%99%BA%E5%BA%93/"},{"name":"Ollama","slug":"Ollama","permalink":"https://qdteng.online/tags/Ollama/"},{"name":"-linux","slug":"linux","permalink":"https://qdteng.online/tags/linux/"},{"name":"linux","slug":"linux","permalink":"https://qdteng.online/tags/linux/"},{"name":"apt-get/dpkg","slug":"apt-get-dpkg","permalink":"https://qdteng.online/tags/apt-get-dpkg/"},{"name":"rpm/yum","slug":"rpm-yum","permalink":"https://qdteng.online/tags/rpm-yum/"},{"name":"java","slug":"java","permalink":"https://qdteng.online/tags/java/"},{"name":"微信消息推送","slug":"微信消息推送","permalink":"https://qdteng.online/tags/%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"},{"name":"企业微信","slug":"企业微信","permalink":"https://qdteng.online/tags/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1/"},{"name":"微信告警","slug":"微信告警","permalink":"https://qdteng.online/tags/%E5%BE%AE%E4%BF%A1%E5%91%8A%E8%AD%A6/"},{"name":"微信机器人","slug":"微信机器人","permalink":"https://qdteng.online/tags/%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"name":"springboot","slug":"springboot","permalink":"https://qdteng.online/tags/springboot/"},{"name":"actuator","slug":"actuator","permalink":"https://qdteng.online/tags/actuator/"},{"name":"nginx","slug":"nginx","permalink":"https://qdteng.online/tags/nginx/"},{"name":"clickhouse","slug":"clickhouse","permalink":"https://qdteng.online/tags/clickhouse/"},{"name":"debian","slug":"debian","permalink":"https://qdteng.online/tags/debian/"},{"name":"redis","slug":"redis","permalink":"https://qdteng.online/tags/redis/"},{"name":"IOT","slug":"IOT","permalink":"https://qdteng.online/tags/IOT/"},{"name":"ESP32","slug":"ESP32","permalink":"https://qdteng.online/tags/ESP32/"},{"name":"Arduino","slug":"Arduino","permalink":"https://qdteng.online/tags/Arduino/"},{"name":"PlatformIO","slug":"PlatformIO","permalink":"https://qdteng.online/tags/PlatformIO/"},{"name":"server","slug":"server","permalink":"https://qdteng.online/tags/server/"},{"name":"远程桌面","slug":"远程桌面","permalink":"https://qdteng.online/tags/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"},{"name":"mysql5.7.36","slug":"mysql5-7-36","permalink":"https://qdteng.online/tags/mysql5-7-36/"},{"name":"mysql","slug":"mysql","permalink":"https://qdteng.online/tags/mysql/"},{"name":"naviat","slug":"naviat","permalink":"https://qdteng.online/tags/naviat/"},{"name":"定时","slug":"定时","permalink":"https://qdteng.online/tags/%E5%AE%9A%E6%97%B6/"},{"name":"报表","slug":"报表","permalink":"https://qdteng.online/tags/%E6%8A%A5%E8%A1%A8/"},{"name":"邮件","slug":"邮件","permalink":"https://qdteng.online/tags/%E9%82%AE%E4%BB%B6/"},{"name":"https","slug":"https","permalink":"https://qdteng.online/tags/https/"},{"name":"自动化","slug":"自动化","permalink":"https://qdteng.online/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"acme","slug":"acme","permalink":"https://qdteng.online/tags/acme/"},{"name":"winlaunch","slug":"winlaunch","permalink":"https://qdteng.online/tags/winlaunch/"},{"name":"软件","slug":"软件","permalink":"https://qdteng.online/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"监控","slug":"监控","permalink":"https://qdteng.online/tags/%E7%9B%91%E6%8E%A7/"},{"name":"运维","slug":"运维","permalink":"https://qdteng.online/tags/%E8%BF%90%E7%BB%B4/"},{"name":"Hertzbeat","slug":"Hertzbeat","permalink":"https://qdteng.online/tags/Hertzbeat/"},{"name":"第三方应用监控","slug":"第三方应用监控","permalink":"https://qdteng.online/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/"},{"name":"微信","slug":"微信","permalink":"https://qdteng.online/tags/%E5%BE%AE%E4%BF%A1/"},{"name":"微信支付","slug":"微信支付","permalink":"https://qdteng.online/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"},{"name":"wecht pay","slug":"wecht-pay","permalink":"https://qdteng.online/tags/wecht-pay/"},{"name":"Apache","slug":"Apache","permalink":"https://qdteng.online/tags/Apache/"},{"name":"Nifi","slug":"Nifi","permalink":"https://qdteng.online/tags/Nifi/"},{"name":"Java","slug":"Java","permalink":"https://qdteng.online/tags/Java/"},{"name":"大数据","slug":"大数据","permalink":"https://qdteng.online/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"ETL","slug":"ETL","permalink":"https://qdteng.online/tags/ETL/"},{"name":"mybatis","slug":"mybatis","permalink":"https://qdteng.online/tags/mybatis/"},{"name":"多数据源","slug":"多数据源","permalink":"https://qdteng.online/tags/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"},{"name":"h2","slug":"h2","permalink":"https://qdteng.online/tags/h2/"},{"name":"docker","slug":"docker","permalink":"https://qdteng.online/tags/docker/"},{"name":"shell","slug":"shell","permalink":"https://qdteng.online/tags/shell/"},{"name":"bat","slug":"bat","permalink":"https://qdteng.online/tags/bat/"},{"name":"建站","slug":"建站","permalink":"https://qdteng.online/tags/%E5%BB%BA%E7%AB%99/"}]}